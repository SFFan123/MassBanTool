<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:MassBanToolMP.ViewModels"
        Width="1100" Height="650"
        MinWidth="900" MinHeight="500"
        x:Class="MassBanToolMP.Views.MainWindow"
        Title="{Binding WindowTitle, Mode=OneTime}"
        Icon="/Assets/moderator.ico"
        Name="Window">
    <Design.DataContext>
        <vm:MainWindowViewModel />
    </Design.DataContext>

    <DockPanel>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="_File">
                <MenuItem Header="Open _File" Command="{Binding OpenFileCommand, Mode=OneTime}"
                          CommandParameter="{Binding ElementName=Window}" />
                <MenuItem Header="Open File from _URL"
                          Command="{Binding OpenFileFromURLCommand, Mode=OneTime}"
                          CommandParameter="{Binding ElementName=Window}"/>
                <MenuItem Header="Fetch last X Followers of Channel Y" 
                          Command="{Binding FetchLastFollowersForChannelCommand, Mode=OneTime}"
                          CommandParameter="{Binding ElementName=Window}"/>
                <Separator/>
                <MenuItem Header="Clear Results" Command="{Binding ClearResultsCommand}"/>
                <Separator />
                <MenuItem Header="Save List as"
                          Command="{Binding SaveListAsCommand}"
                          CommandParameter="{Binding ElementName=Window}"
                          ToolTip.Tip="Saves the List as is to a file."/>
            </MenuItem>
            <MenuItem Header="_Credentials">
                <MenuItem Header="_Load From Credential Manager" 
                          Command="{Binding LoadCredentialsCommand, Mode=OneTime}" 
                          ToolTip.Tip="Loads the Twitch credentials using Windows Credential Manager or secret-tool. App Name 'MassBanTool'"/>
                <MenuItem Header="_Save Credential" 
                          Command="{Binding StoreCredentialsCommand, Mode=OneTime}" 
                          ToolTip.Tip="Saves the Twitch credentials using Windows Credential Manager or secret-tool" />
                <MenuItem Header="_Get New Credentials" 
                          Command="{Binding GetOAuthCommand, Mode=OneTime}" 
                          ToolTip.Tip="https://twitchapps.com/tmi/" />
            </MenuItem>
            <MenuItem Header="_Settings">
                <MenuItem Header="_Save App Settings" Command="{Binding SaveDataCommand, Mode=OneTime}"/>
                <MenuItem Header="Edit Last Visit channels" Command="{Binding EditLastVisitChannelCommand}" CommandParameter="{Binding ElementName=Window}"/>
                <Separator/>
                <CheckBox Content="Load Credentials on Startup"
                          IsChecked="{Binding SettingLoadCredentialsOnStartup}"/>
                <Separator/>
                <MenuItem Header="Special User">
                    <CheckBox Content="Protect VIPs/Mods from Commands"
                              IsChecked="{Binding ProtectSpecialUsers}" />
                    <RadioButton GroupName="SpecialUserMode"
                                 IsChecked="{Binding ProtectedUserMode_Skip}"
                                 Content="Skip Commands targeting User" />
                    <RadioButton GroupName="SpecialUserMode"
                                 IsChecked="{Binding ProtectedUserMode_Cancel}"
                                 Content="Abort Action (default)" />
                </MenuItem>
                <Separator/>
                <CheckBox Content="Dry Run"
                          ToolTip.Tip="No commands get sent to twitch, only in log."
                          IsChecked="{Binding DryRun}" 
                          IsEnabled="{Binding CanExecRun}" />
            </MenuItem>
            <MenuItem Header="_Misc">
                <MenuItem Header="Show Log window" Command="{Binding ShowLogWindowCommand, Mode=OneTime}" 
                          CommandParameter="{Binding ElementName=Window}"/>
                <Separator />
                <MenuItem Header="Open Github Page" 
                          Command="{Binding OpenGitHubPageCommand, Mode=OneTime}"/>
                <Separator/>
                <MenuItem Header="Check for new Version"
                          Command="{Binding CheckForNewVersionsCommand}"
                          CommandParameter="{Binding ElementName=Window}"/>
                <CheckBox Content="Check for new Version on Startup"
                          IsChecked="{Binding CheckForNewVerionOnStartup}"/>
                <CheckBox Content="Include Pre-Releases"
                          IsChecked="{Binding IncludePrereleases}"/>
            </MenuItem>
            <MenuItem Header="_Help" HotKey="F1">
                <MenuItem Header="_General" Command="{Binding OpenWikiCommand, Mode=OneTime}" />
                <Separator />
                <MenuItem Header="_Cooldown info" Command="{Binding CooldownInfoCommand, Mode=OneTime}" />
                <Separator />
                <MenuItem Header="_Regex">
                    <MenuItem Header="Regex101.com" Command="{Binding OpenRegex101Command, Mode=OneTime}" />
                    <MenuItem Header="MS Docs on Regex" Command="{Binding OpenRegexDocsCommand, Mode=OneTime}" />
                </MenuItem>
                <MenuItem Header="Info" Command="{Binding ShowInfoWindowCommand}"/>
            </MenuItem>
        </Menu>

        <StackPanel DockPanel.Dock="Bottom" Name="StatusStrip" Orientation="Horizontal"
                    Margin="2,8,2,4">
            <TextBlock Text="ETA: " />
            <TextBlock Text="{Binding ETA,StringFormat={}{0:hh}:{0:mm}:{0:ss},FallbackValue=00:00:00,Mode=OneWay}" />
            <Separator Foreground="White" Margin="5,0,5,0" />
            <TextBlock Text="List type: " />
            <TextBlock Text="{Binding ListType}" />
            <TextBlock Text="Connected: " Margin="15,0,0,0" />
            <TextBlock Text="{Binding IsConnected}" />
        </StackPanel>

        <Grid Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!-- List -->
            <DataGrid Grid.Row="0"
                      Grid.RowSpan="4"
                      Grid.Column="0"
                      Margin="0,9, 0, 30"
                      Name="DataGrid"
                      Items="{Binding Entries}"
                      IsReadOnly="False"
                      GridLinesVisibility="Horizontal"
                      CanUserSortColumns="False"
                      Background="Transparent">
                <DataGrid.KeyBindings>
                    <KeyBinding Gesture="delete"
                                CommandParameter="{Binding ElementName=DataGrid, Path=SelectedItems}"
                                Command="{Binding OnDataGridRemoveEntry}" />
                </DataGrid.KeyBindings>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="CMD" Width="Auto" CanUserReorder="False" IsReadOnly="False"
                                        Binding="{Binding Command}" />
                    <DataGridTextColumn Header="Name" CanUserReorder="False" Binding="{Binding Name}" />
                    <DataGridTextColumn Header="Reason" CanUserReorder="False" Binding="{Binding Reason}" />
                </DataGrid.Columns>
                <DataGrid.ContextMenu>
                    <ContextMenu PlacementMode="Pointer" >
                        <MenuItem
                            Command="{Binding OnClickPropertiesAddEntry}"
                            CommandParameter="{Binding ElementName=Window}"
                            Header="Add Entry" />
                        <MenuItem
                            Command="{Binding OnClickPropertiesPasteClipboard}"
                            Header="Paste from Clipboard" />
                    </ContextMenu>
                </DataGrid.ContextMenu>
            </DataGrid>

            <ProgressBar
                Grid.Column="0"
                Grid.Row="3"
                VerticalAlignment="Bottom"
                Foreground="Green"
                ShowProgressText="True"
                Value="{Binding BanProgress}" />

            <!-- Login -->
            <StackPanel DockPanel.Dock="Right"
                        Grid.Row="0"
                        Grid.Column="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100" />
                        <ColumnDefinition Width="200" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="200" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Text="Username: " HorizontalAlignment="Right"
                               Margin="0,10,0,0" />
                    <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding Username}" Margin="0,5,0,0" />

                    <TextBlock Grid.Row="1" Grid.Column="0" Text="OAuth Token: " HorizontalAlignment="Right"
                               Margin="0,10,0,0" />
                    <TextBox Grid.Row="1" Grid.Column="1" PasswordChar="*" Text="{Binding OAuth}" Margin="0,5,0,0" />

                    <TextBlock Grid.Row="2" Grid.Column="0" Text="Channel(s): " HorizontalAlignment="Right"
                               Margin="0,10,0,0" />

                    <StackPanel Grid.Row="2"
                                Grid.Column="1"
                                Orientation="Horizontal">
                        <TextBox Width="200"
                                 Margin="0,5,0,0"
                                 Text="{Binding ChannelS}"/>
                        <Button Margin="2,6" Content="&#709;" Click="Button_OnClick"
                                ContextMenu="{Binding LastVisitedChannelsMenu}" />
                    </StackPanel>
                    <Button
                        Grid.Column="1"
                        Grid.Row="3"
                        Content="{Binding ConButtonText}"
                        Width="200"
                        Margin="0,5,0,0"
                        Command="{Binding ConnectCommand, Mode=OneTime}"
                        IsEnabled="{Binding CanConnect}"
                        HorizontalContentAlignment="Center" />
                </Grid>
            </StackPanel>

            <StackPanel Grid.Row="1" Grid.Column="1" Margin="5,10">
                <StackPanel Orientation="Horizontal">
                    <NumericUpDown Value="{Binding MessageDelay}"
                                   Minimum="301"
                                   Increment="10"
                                   Width="150"
                                   Margin="0,5,0,0" />
                </StackPanel>
                <Label Content="Cooldown between messages in ms" />
            </StackPanel>

            <TabControl Grid.Column="1"
                        Grid.Row="3"
                        Height="350"
                        Margin="0,5,0,0">
                <TabControl.Resources>
                    <ControlTemplate x:Key="PauseButton">
                        <Button Content="{Binding PauseButtonText}" Margin="0,5,0,0" Width="70" HorizontalContentAlignment="Center"
                                Command="{Binding OnClickPauseActionCommand, Mode=OneTime}"
                                IsEnabled="{Binding CanExecPauseAbort}"/>
                    </ControlTemplate>

                    <ControlTemplate x:Key="AbortButton">
                        <Button Content="Abort" Margin="0,5,0,0" Width="70" HorizontalContentAlignment="Center"
                                Command="{Binding OnClickCancelActionCommand, Mode=OneTime}"
                                IsEnabled="{Binding CanExecPauseAbort}"/>
                    </ControlTemplate>

                </TabControl.Resources>
                <TabItem Header="Banning" Cursor="Hand">
                    <StackPanel>
                        <Label Content="Ban Reason: " />
                        <TextBox Height="40" Margin="0,0,0,20" Text="{Binding Reason}" />
                        <StackPanel Orientation="Horizontal">
                            <Button Template="{StaticResource PauseButton}" Margin="0,0,5,0" />
                            <Button Template="{StaticResource AbortButton}" Margin="0,0,5,0" />
                            <Button Content="Export as Readfile"
                                    Margin="0,5,5,0"
                                    Command="{Binding SaveBanListAsCommand}"
                                    CommandParameter="{Binding ElementName=Window}"
                                    ToolTip.Tip="Saves the List as ban list with the ban reason from above (overwrites whats in list) to a file."/>
                            <Button Content="Run"
                                    Width="60" 
                                    HorizontalContentAlignment="Center" 
                                    Margin="0,5,0,0"
                                    Command="{Binding RunBanCommand, Mode=OneTime}" 
                                    IsEnabled="{Binding CanExecRun}"/>
                        </StackPanel>
                    </StackPanel>
                </TabItem>

                <TabItem Header="Unban" Cursor="Hand">
                    <StackPanel Orientation="Horizontal" Margin="0" VerticalAlignment="Top">
                        <Button Template="{StaticResource PauseButton}" Margin="0,0,5,0" />
                        <Button Template="{StaticResource AbortButton}" Margin="0,0,5,0" />
                        <Button Content="Export as Readfile"
                                Margin="0,5,5,0"
                                Command="{Binding SaveUnBanListAsCommand}"
                                CommandParameter="{Binding ElementName=Window}"
                                ToolTip.Tip="Saves the List as unban list to a file."/>
                        <Button Content="Run" Width="60" HorizontalContentAlignment="Center" Margin="0,5,0,0"
                                Command="{Binding RunUnbanCommand, Mode=OneTime}"
                                IsEnabled="{Binding CanExecRun}"/>
                    </StackPanel>
                </TabItem>

                <TabItem Header="Readfile" Cursor="Hand">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <TextBlock
                            Grid.Row="0"
                            Text="Allowed Actions:" />

                        <TextBox Grid.Column="0" Grid.Row="1"
                                 TextWrapping="Wrap"
                                 AcceptsReturn="True"
                                 Text="{Binding ReadFileAllowedActions, Mode=TwoWay}"/>
                        <StackPanel Grid.Row="1"
                                    Grid.Column="1">
                            <!--Behaviour on Mismatch-->
                            <RadioButton Content="Warn and Abort" IsChecked="{Binding ReadFileCommandMismatch_Cancel}" />
                            <RadioButton Content="Remove entry" IsChecked="{Binding ReadFileCommandMismatch_Skip}"/>
                        </StackPanel>

                        <StackPanel Grid.Column="0" Grid.Row="2" Orientation="Horizontal">
                            <Button Template="{StaticResource PauseButton}" Margin="0,0,5,0" />
                            <Button Template="{StaticResource AbortButton}" Margin="0,0,5,0" />
                        </StackPanel>
                        <Button Grid.Row="2" Grid.Column="1" Content="Run" Margin="0,5,0,0" Width="60"
                                HorizontalContentAlignment="Center" 
                                Command="{Binding RunReadfileCommand, Mode=OneTime}"
                                IsEnabled="{Binding CanExecRun}"/>
                    </Grid>
                </TabItem>

                <TabItem Header="List filter" Cursor="Hand">
                    <StackPanel>
                        <TextBlock Text="Regex: " />
                        <TextBox Text="{Binding FilterRegex}" />
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <StackPanel Grid.Column="0">
                                <RadioButton GroupName="ListRemoveMode" Content="Remove not matching"
                                             IsChecked="{Binding ListFilterRemoveNotMatching}" />
                                <RadioButton GroupName="ListRemoveMode" Content="Remove matching"
                                             IsChecked="{Binding ListFilterRemoveMatching}" />
                            </StackPanel>
                            <StackPanel Grid.Column="1">
                                <CheckBox Content="IgnoreCase" IsChecked="{Binding RegexOptionIgnoreCase}"
                                          ToolTip.Tip="Specifies case-insensitive matching. /i Flag" />
                                <CheckBox Content="Multiline" IsChecked="{Binding RegexOptionMultiline}"
                                          ToolTip.Tip="Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. /m Flag." />
                                <CheckBox Content="CultureInvariant" IsChecked="{Binding RegexOptionCultureInvariant}"
                                          ToolTip.Tip="Specifies that cultural differences in language is ignored." />
                                <CheckBox Content="ECMAScript" IsChecked="{Binding RegexOptionEcmaScript}"
                                          ToolTip.Tip="Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the IgnoreCase, Multiline, and Compiled values. The use of this value with any other values results in an exception." />
                            </StackPanel>
                        </Grid>
                        <Button Content="Run Regex" Command="{Binding RunListFilterCommand, Mode=OneTime}" />
                    </StackPanel>
                </TabItem>

                <TabItem Header="Misc" Cursor="Hand">
                    <WrapPanel Orientation="Vertical">
                        <Button Content="Check listtype" Margin="2"
                                Command="{Binding RunCheckListTypeCommand, Mode=OneTime}" />
                        <Button Content="Sort list" Margin="2" Command="{Binding RunSortListCommand}" />
                        <Button Content="Remove not allowed commands" Margin="2"
                                Command="{Binding RunRemoveNotAllowedActionsCommand, Mode=OneTime}" />
                    </WrapPanel>
                </TabItem>
            </TabControl>
        </Grid>
    </DockPanel>
</Window>